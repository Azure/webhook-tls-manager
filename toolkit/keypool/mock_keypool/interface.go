// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/webhook-tls-manager/toolkit/keypool (interfaces: Interface)

// Package mock_keypool is a generated GoMock package.
package mock_keypool

import (
	context "context"
	rsa "crypto/rsa"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BlockUntilCount mocks base method.
func (m *MockInterface) BlockUntilCount(arg0 context.Context, arg1 logrus.Entry, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUntilCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUntilCount indicates an expected call of BlockUntilCount.
func (mr *MockInterfaceMockRecorder) BlockUntilCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUntilCount", reflect.TypeOf((*MockInterface)(nil).BlockUntilCount), arg0, arg1, arg2)
}

// CurrentSize mocks base method.
func (m *MockInterface) CurrentSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// CurrentSize indicates an expected call of CurrentSize.
func (mr *MockInterfaceMockRecorder) CurrentSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSize", reflect.TypeOf((*MockInterface)(nil).CurrentSize))
}

// GenerateSingleKey mocks base method.
func (m *MockInterface) GenerateSingleKey(arg0 context.Context, arg1 logrus.Entry) (*rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSingleKey", arg0, arg1)
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSingleKey indicates an expected call of GenerateSingleKey.
func (mr *MockInterfaceMockRecorder) GenerateSingleKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSingleKey", reflect.TypeOf((*MockInterface)(nil).GenerateSingleKey), arg0, arg1)
}

// GetKey mocks base method.
func (m *MockInterface) GetKey(arg0 context.Context, arg1 logrus.Entry) (*rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockInterfaceMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockInterface)(nil).GetKey), arg0, arg1)
}
