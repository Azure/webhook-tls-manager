// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/webhook-tls-manager/toolkit/certificates/certcreator (interfaces: CertCreator)

// Package mock_cert_creator is a generated GoMock package.
package mock_cert_creator

import (
	context "context"
	rsa "crypto/rsa"
	x509 "crypto/x509"
	io "io"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	retry "k8s.io/legacy-cloud-providers/azure/retry"
)

// MockCertCreator is a mock of CertCreator interface.
type MockCertCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCertCreatorMockRecorder
}

// MockCertCreatorMockRecorder is the mock recorder for MockCertCreator.
type MockCertCreatorMockRecorder struct {
	mock *MockCertCreator
}

// NewMockCertCreator creates a new mock instance.
func NewMockCertCreator(ctrl *gomock.Controller) *MockCertCreator {
	mock := &MockCertCreator{ctrl: ctrl}
	mock.recorder = &MockCertCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertCreator) EXPECT() *MockCertCreatorMockRecorder {
	return m.recorder
}

// CreateCertificate mocks base method.
func (m *MockCertCreator) CreateCertificate(arg0 io.Reader, arg1, arg2 *x509.Certificate, arg3, arg4 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockCertCreatorMockRecorder) CreateCertificate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockCertCreator)(nil).CreateCertificate), arg0, arg1, arg2, arg3, arg4)
}

// CreateCertificateWithPublicKey mocks base method.
func (m *MockCertCreator) CreateCertificateWithPublicKey(arg0 context.Context, arg1 *x509.Certificate, arg2 *rsa.PublicKey, arg3 *x509.Certificate, arg4 *rsa.PrivateKey) (*x509.Certificate, *retry.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateWithPublicKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(*retry.Error)
	return ret0, ret1
}

// CreateCertificateWithPublicKey indicates an expected call of CreateCertificateWithPublicKey.
func (mr *MockCertCreatorMockRecorder) CreateCertificateWithPublicKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateWithPublicKey", reflect.TypeOf((*MockCertCreator)(nil).CreateCertificateWithPublicKey), arg0, arg1, arg2, arg3, arg4)
}

// GenerateSN mocks base method.
func (m *MockCertCreator) GenerateSN() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSN")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSN indicates an expected call of GenerateSN.
func (mr *MockCertCreatorMockRecorder) GenerateSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSN", reflect.TypeOf((*MockCertCreator)(nil).GenerateSN))
}

// ParseCertificate mocks base method.
func (m *MockCertCreator) ParseCertificate(arg0 []byte) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCertificate", arg0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCertificate indicates an expected call of ParseCertificate.
func (mr *MockCertCreatorMockRecorder) ParseCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCertificate", reflect.TypeOf((*MockCertCreator)(nil).ParseCertificate), arg0)
}
